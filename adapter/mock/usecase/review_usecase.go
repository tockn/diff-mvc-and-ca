// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/review_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	input "github.com/tockn/diff-mvc-and-ca/usecase/input"
	output "github.com/tockn/diff-mvc-and-ca/usecase/output"
	reflect "reflect"
)

// MockReview is a mock of Review interface
type MockReview struct {
	ctrl     *gomock.Controller
	recorder *MockReviewMockRecorder
}

// MockReviewMockRecorder is the mock recorder for MockReview
type MockReviewMockRecorder struct {
	mock *MockReview
}

// NewMockReview creates a new mock instance
func NewMockReview(ctrl *gomock.Controller) *MockReview {
	mock := &MockReview{ctrl: ctrl}
	mock.recorder = &MockReviewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReview) EXPECT() *MockReviewMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockReview) Get(ctx context.Context, ipt *input.GetReview) (*output.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ipt)
	ret0, _ := ret[0].(*output.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockReviewMockRecorder) Get(ctx, ipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReview)(nil).Get), ctx, ipt)
}

// Post mocks base method
func (m *MockReview) Post(ctx context.Context, ipt *input.PostReview) (*output.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, ipt)
	ret0, _ := ret[0].(*output.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockReviewMockRecorder) Post(ctx, ipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockReview)(nil).Post), ctx, ipt)
}
