// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/presenter.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	output "github.com/tockn/diff-mvc-and-ca/usecase/output"
	reflect "reflect"
)

// MockPresenter is a mock of Presenter interface
type MockPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterMockRecorder
}

// MockPresenterMockRecorder is the mock recorder for MockPresenter
type MockPresenterMockRecorder struct {
	mock *MockPresenter
}

// NewMockPresenter creates a new mock instance
func NewMockPresenter(ctrl *gomock.Controller) *MockPresenter {
	mock := &MockPresenter{ctrl: ctrl}
	mock.recorder = &MockPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPresenter) EXPECT() *MockPresenterMockRecorder {
	return m.recorder
}

// ViewItem mocks base method
func (m *MockPresenter) ViewItem(ctx context.Context, item *output.Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ViewItem", ctx, item)
}

// ViewItem indicates an expected call of ViewItem
func (mr *MockPresenterMockRecorder) ViewItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewItem", reflect.TypeOf((*MockPresenter)(nil).ViewItem), ctx, item)
}

// ViewPostItem mocks base method
func (m *MockPresenter) ViewPostItem(ctx context.Context, item *output.Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ViewPostItem", ctx, item)
}

// ViewPostItem indicates an expected call of ViewPostItem
func (mr *MockPresenterMockRecorder) ViewPostItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewPostItem", reflect.TypeOf((*MockPresenter)(nil).ViewPostItem), ctx, item)
}

// ViewReview mocks base method
func (m *MockPresenter) ViewReview(ctx context.Context, review *output.Review) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ViewReview", ctx, review)
}

// ViewReview indicates an expected call of ViewReview
func (mr *MockPresenterMockRecorder) ViewReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewReview", reflect.TypeOf((*MockPresenter)(nil).ViewReview), ctx, review)
}

// ViewPostReview mocks base method
func (m *MockPresenter) ViewPostReview(ctx context.Context, review *output.Review) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ViewPostReview", ctx, review)
}

// ViewPostReview indicates an expected call of ViewPostReview
func (mr *MockPresenterMockRecorder) ViewPostReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewPostReview", reflect.TypeOf((*MockPresenter)(nil).ViewPostReview), ctx, review)
}

// ViewError mocks base method
func (m *MockPresenter) ViewError(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ViewError", ctx, err)
}

// ViewError indicates an expected call of ViewError
func (mr *MockPresenterMockRecorder) ViewError(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewError", reflect.TypeOf((*MockPresenter)(nil).ViewError), ctx, err)
}
