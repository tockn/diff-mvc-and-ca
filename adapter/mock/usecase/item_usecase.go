// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/item_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	input "github.com/tockn/diff-mvc-and-ca/usecase/input"
	output "github.com/tockn/diff-mvc-and-ca/usecase/output"
	reflect "reflect"
)

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockItem) Get(ipt *input.GetItem) (*output.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ipt)
	ret0, _ := ret[0].(*output.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockItemMockRecorder) Get(ipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItem)(nil).Get), ipt)
}

// Post mocks base method
func (m *MockItem) Post(ipt *input.PostItem) (*output.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ipt)
	ret0, _ := ret[0].(*output.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockItemMockRecorder) Post(ipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockItem)(nil).Post), ipt)
}
