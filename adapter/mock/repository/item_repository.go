// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/item_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/tockn/diff-mvc-and-ca/domain/entity"
	reflect "reflect"
)

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockItem) FindByID(id int64) (*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockItemMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItem)(nil).FindByID), id)
}

// Save mocks base method
func (m *MockItem) Save(name string) (*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", name)
	ret0, _ := ret[0].(*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockItemMockRecorder) Save(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockItem)(nil).Save), name)
}

// GetRankingByID mocks base method
func (m *MockItem) GetRankingByID(id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRankingByID", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRankingByID indicates an expected call of GetRankingByID
func (mr *MockItemMockRecorder) GetRankingByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRankingByID", reflect.TypeOf((*MockItem)(nil).GetRankingByID), id)
}

// UpdateRateByID mocks base method
func (m *MockItem) UpdateRateByID(id int64, rate float64) (*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateByID", id, rate)
	ret0, _ := ret[0].(*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRateByID indicates an expected call of UpdateRateByID
func (mr *MockItemMockRecorder) UpdateRateByID(id, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateByID", reflect.TypeOf((*MockItem)(nil).UpdateRateByID), id, rate)
}
