// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/review_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/tockn/diff-mvc-and-ca/domain/entity"
	reflect "reflect"
)

// MockReview is a mock of Review interface
type MockReview struct {
	ctrl     *gomock.Controller
	recorder *MockReviewMockRecorder
}

// MockReviewMockRecorder is the mock recorder for MockReview
type MockReviewMockRecorder struct {
	mock *MockReview
}

// NewMockReview creates a new mock instance
func NewMockReview(ctrl *gomock.Controller) *MockReview {
	mock := &MockReview{ctrl: ctrl}
	mock.recorder = &MockReviewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReview) EXPECT() *MockReviewMockRecorder {
	return m.recorder
}

// FindByID mocks base method
func (m *MockReview) FindByID(ctx context.Context, id int64) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockReviewMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReview)(nil).FindByID), ctx, id)
}

// Save mocks base method
func (m *MockReview) Save(ctx context.Context, rate float64, itemID int64) (*entity.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, rate, itemID)
	ret0, _ := ret[0].(*entity.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockReviewMockRecorder) Save(ctx, rate, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReview)(nil).Save), ctx, rate, itemID)
}

// SumOfRateByItemID mocks base method
func (m *MockReview) SumOfRateByItemID(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumOfRateByItemID", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumOfRateByItemID indicates an expected call of SumOfRateByItemID
func (mr *MockReviewMockRecorder) SumOfRateByItemID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumOfRateByItemID", reflect.TypeOf((*MockReview)(nil).SumOfRateByItemID), ctx, id)
}

// CountByItemID mocks base method
func (m *MockReview) CountByItemID(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByItemID", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByItemID indicates an expected call of CountByItemID
func (mr *MockReviewMockRecorder) CountByItemID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByItemID", reflect.TypeOf((*MockReview)(nil).CountByItemID), ctx, id)
}
