// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/item_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// CalcItemRateByID mocks base method
func (m *MockItem) CalcItemRateByID(ctx context.Context, id int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcItemRateByID", ctx, id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcItemRateByID indicates an expected call of CalcItemRateByID
func (mr *MockItemMockRecorder) CalcItemRateByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcItemRateByID", reflect.TypeOf((*MockItem)(nil).CalcItemRateByID), ctx, id)
}
